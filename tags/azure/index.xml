<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Azure on Hao's Blog</title><link>https://blog.lifeishao.com/tags/azure/</link><description>Recent content in Azure on Hao's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 25 Sep 2017 10:19:06 -0500</lastBuildDate><atom:link href="https://blog.lifeishao.com/tags/azure/index.xml" rel="self" type="application/rss+xml"/><item><title>Serving Hugo on Azure with Continuous Integration</title><link>https://blog.lifeishao.com/2017/09/25/serving-hugo-on-azure-with-continuous-integration/</link><pubDate>Mon, 25 Sep 2017 10:19:06 -0500</pubDate><guid>https://blog.lifeishao.com/2017/09/25/serving-hugo-on-azure-with-continuous-integration/</guid><description>Why? In my last post, I walked through how to configure your Azure blob and CDN to serve your static website. The deployment script outlined in that post is fine for a simple blog site. However, it is not a solution if you have a site that is contributed by multiple people. Everytime anyone pushes, they would get a merge conflict on the generated content, or they can force push and risk losing other changes.</description></item><item><title>Custom NodeJs Deployment on Azure Web App</title><link>https://blog.lifeishao.com/2017/03/24/custom-nodejs-deployment-on-azure-web-app/</link><pubDate>Fri, 24 Mar 2017 17:05:17 -0500</pubDate><guid>https://blog.lifeishao.com/2017/03/24/custom-nodejs-deployment-on-azure-web-app/</guid><description>One of the advantages of using Azure Web App is how easy it is to deploy a NodeJS app. If you have an app as simple as this one, Azure Web App will pick it up, install all the node dependencies, and serve the app on port 80. And you are done!!!
Unfortunately, a lot of times, you might want to venture outside the comfort of auto-deploy land, and do some customization.</description></item></channel></rss>